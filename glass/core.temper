
let {...} = import("../internal/js.temper");

let stack = new ListBuilder<BaseElement>();

let vMake = new Typed<String, BaseElement>("return document.createElement(arg);");
let vBody = new Typed<Null, BaseElement>("return document.body;");
let vHtml = new Typed<Null, BaseElement>("return document.body.parentElement;");
let vElementAppend = new Typed<Listed<BaseElement>, Null>("arg[0].append(arg[1]);");
let vElementAddText = new Typed<Listed<BaseElement | String>, Null>("arg[0].innerText += arg[1];");
let vElementGetStyle = new Typed<Listed<BaseElement | String>, String>("return arg[0].style[arg[1]];");
let vElementSetStyle = new Typed<Listed<BaseElement | String>, Null>("arg[0].style[arg[1]] = arg[2];");
let vElementOn = new Typed<Listed<BaseElement | String | Block>, Null>("arg[0].addEventListener(arg[1], arg[2]);");
let vElementRemove = new Typed<BaseElement, Null>("arg.remove();");
var self: BaseElement;

let make(element: String): BaseElement {
  return vMake.call(element);
}

export let Block = fn(): Void;

export class BaseElement {}

export let with(element: BaseElement, block: Block): Void {
  self = element;
  stack.add(element);
  let ret = block();
  stack.removeLast();
  if (!stack.isEmpty) {
    self = stack[stack.length-1];
  }
}

export let html(block: Block): Void {
  with (vHtml.call(null)) {
    block()
  }
}

export let body(block: Block): Void {
  with (vBody.call(null)) {
    block()
  }
}

export let app(block: Block): Void {
  onReadyApp.add(fn(): Void {
    with (vBody.call(null)) {
      block()
    }
  });
}

export let child(type: String, block: Block): Void {
  let elem = make(type);
  vElementAppend.call([self, elem]);
  with (elem) {
    block()
  }
}

export let text(s: String): Void {
  vElementAddText.call([self, s]);
}

export let getStyle(prop: String): String {
  return vElementGetStyle.call([self, prop]);
}

export let setStyle(prop: String, value: String): Void {
  vElementSetStyle.call([self, prop, value]);
}

export let delay(block: Block): Block {
  block
}

export let later(block: Block): Block {
  let el = self;
  return fn(): Void {
    with (el) {
      block();
    }
  }
}

export let call(block: Block): Block {
  block();
  return later(block);
}

export let repeat(n: Int, block: fn(Int): AnyValue): Void {
  for (var i = 0; i < n; i++) {
    block(i)
  }
}

export let on(event: String, block: Block): Void {
  vElementOn.call([self, event, later(block)]);
}

export let remove(): Void {
  vElementRemove.call(self);
}
