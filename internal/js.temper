
export class Loader<Arg, Ret> {
  public load(s: String): fn(Arg): Ret;
}

export class Box {
  public var loader: Loader | Null;

  public set impl(value: Loader): Void {
    loader = value;
    ready();
  }
}

export class Typed<Arg, Ret> {
  public var func: fn(Arg): Ret;

  public constructor(s: String): Void | Bubble {
    let obj = this;
    
    let more(): Void {
      let impl = box.loader;
      match (impl) {
        null -> onReady.add(more);
        is Loader<Arg, Ret> -> obj.func = impl.load(s);
        else -> bubble();
      }
    }

    more();
  }

  public call(v: Arg): Ret {
    return func(v);
  }
}

export var box: Box = new Box(null);
export var onReady = new ListBuilder<fn(): Void>();
export var onReadyApp = new ListBuilder<fn(): Void>();

export let ready(): Void {
  while (!onReady.isEmpty) {
    onReady.removeLast()();
  }
  while (!onReadyApp.isEmpty) {
    onReadyApp.removeLast()();
  }
}
