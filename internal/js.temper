
export class Loader<Arg, Ret> {
  public load(s: String): fn(Arg): Ret;
}

export class Box {
  public var loader: Loader | Null;

  public set impl(value: Loader): Void {
    loader = value;
    ready();
  }
}

export class Typed<Arg, Ret> {
  public var func: fn(Arg): Ret;

  public constructor(s: String): Void | Bubble {
    let obj = this;
    
    let more(): Void {
      let impl = box.loader;
      match (impl) {
        null -> onReadys[0].add(more);
        is Loader<Arg, Ret> -> obj.func = impl.load(s);
        else -> bubble();
      }
    }

    more();
  }

  public call(v: Arg): Ret {
    return func(v);
  }
}

export var box: Box = new Box(null);
export var onReadys = [
  new ListBuilder<fn(): Void>(),
  new ListBuilder<fn(): Void>(),
];
export let ready(): Void {
  for (var i = 0; i < onReadys.length; i++) {
    let onReady = onReadys[i];
    while (!onReady.isEmpty) {
      onReady.removeLast()();
    }
  }
}
